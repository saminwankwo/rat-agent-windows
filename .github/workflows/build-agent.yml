name: Build & Release Remote Agent

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read  # Needed for artifact sharing between jobs

jobs:
  build_linux:
    name: Build Linux/macOS/Windows Binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential gcc make zip gnupg
          sudo gem install --no-document fpm
          npm install
          npm install -g pkg

      - name: Build all binaries
        run: |
          mkdir -p dist
          
          # Windows binaries
          pkg server.js --targets node16-win-x64 --output dist/agent-win-x64.exe --options no-console
          pkg server.js --targets node16-win-x86 --output dist/agent-win-x86.exe --options no-console
          pkg start-agent.js --targets node16-win-x64 --output dist/start-agent-x64.exe --options no-console
          pkg start-agent.js --targets node16-win-x86 --output dist/start-agent-x86.exe --options no-console
          
          # Linux binary
          pkg server.js --targets node16-linux-x64 --output dist/agent-linux --options no-console
          
          # macOS binary
          pkg server.js --targets node16-macos-x64 --output dist/agent-macos --options no-console

      - name: Create Linux package
        run: |
          mkdir -p package-linux/usr/local/bin
          cp dist/agent-linux package-linux/usr/local/bin/
          mkdir -p package-linux/etc/skel/.config/autostart
          
          cat <<EOF > package-linux/etc/skel/.config/autostart/remote-agent.desktop
          [Desktop Entry]
          Type=Application
          Exec=/usr/local/bin/agent-linux
          Hidden=false
          NoDisplay=false
          X-GNOME-Autostart-enabled=true
          Name=RemoteAgent
          Comment=Launch Remote Agent silently
          EOF
          
          mkdir -p package-linux/DEBIAN
          cat <<EOF > package-linux/DEBIAN/control
          Package: remote-agent
          Version: ${{ github.ref_name }}
          Architecture: amd64
          Maintainer: Your Name <your.email@example.com>
          Description: Remote Access Agent
          EOF
          
          cat <<EOF > package-linux/DEBIAN/postinst
          #!/bin/bash
          mkdir -p /home/\$USER/.config/autostart
          cp /etc/skel/.config/autostart/remote-agent.desktop /home/\$USER/.config/autostart/
          chmod +x /home/\$USER/.config/autostart/remote-agent.desktop
          EOF
          
          chmod +x package-linux/DEBIAN/postinst
          fpm -s dir -t deb -n remote-agent -v ${{ github.ref_name }} --prefix=/ package-linux
          mv remote-agent_${{ github.ref_name }}_amd64.deb dist/

      - name: Create macOS package
        run: |
          mkdir -p "RemoteAgent.app/Contents/MacOS"
          mkdir -p "RemoteAgent.app/Contents/Resources"
          cp dist/agent-macos "RemoteAgent.app/Contents/MacOS/RemoteAgent"
          
          cat <<EOF > "RemoteAgent.app/Contents/Info.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>RemoteAgent</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.remoteagent</string>
            <key>CFBundleName</key>
            <string>RemoteAgent</string>
            <key>CFBundleVersion</key>
            <string>${{ github.ref_name }}</string>
            <key>LSUIElement</key>
            <true/>
          </dict>
          </plist>
          EOF
          
          zip -r "dist/RemoteAgent-macos.zip" "RemoteAgent.app"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  build_windows:
    name: Build Windows Installer
    needs: build_linux
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist

      - name: Disable Defender restrictions (Controlled Folder Access & Network Protection)
        run: |
          powershell -Command "Set-MpPreference -EnableControlledFolderAccess Disabled -Force"
          powershell -Command "Set-MpPreference -EnableNetworkProtection Disabled -Force"
        shell: pwsh


      - name: Install Inno Setup
        shell: pwsh
        run: choco install innosetup -y --no-progress

      - name: Verify files
        shell: pwsh
        run: |
          if (-not (Test-Path dist/agent-win-x64.exe)) {
            Write-Error "Windows binaries not found!"
            exit 1
          }

      - name: Compile installer
        shell: pwsh
        run: |
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' setup.iss
          if (-not (Test-Path "Output\RemoteAgentInstaller.exe")) {
            Write-Error "Installer compilation failed!"
            exit 1
          }
          Move-Item -Path "Output\RemoteAgentInstaller.exe" -Destination "dist/"

      - name: Upload final artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: dist/
          retention-days: 1

  release:
    name: Create Release
    needs: build_windows
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: release

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            release/agent-win-*.exe
            release/start-agent-*.exe
            release/RemoteAgentInstaller.exe
            release/remote-agent_*.deb
            release/RemoteAgent-macos.zip
          body: |
            ## Remote Access Agent ${{ github.ref_name }}

            ### Windows
            - **Installer**: RemoteAgentInstaller.exe
            - **Standalone EXEs**: 
              - 64-bit: agent-win-x64.exe
              - 32-bit: agent-win-x86.exe

            ### Linux
            - **Debian Package**: remote-agent_*.deb

            ### macOS
            - **Application Bundle**: RemoteAgent-macos.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}