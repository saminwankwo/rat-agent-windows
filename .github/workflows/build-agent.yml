name: Build & Release Remote Agent

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential gcc make zip gnupg
          sudo gem install --no-document fpm
          npm install
          npm install -g pkg create-dmg

      - name: Build agent binaries
        run: |
          mkdir -p dist
          # Windows x64 & x86
          pkg server.js --targets node16-win-x64 --output dist/agent-win-x64.exe
          pkg server.js --targets node16-win-x86 --output dist/agent-win-x86.exe
          pkg start-agent.js --targets node16-win-x64 --output dist/start-agent-x64.exe --options no-console
          pkg start-agent.js --targets node16-win-x86 --output dist/start-agent-x86.exe --options no-console

          # Linux & macOS
          pkg server.js --targets node16-linux-x64 --output dist/agent-linux
          pkg server.js --targets node16-macos-x64 --output dist/agent-macos

      - name: Create Linux .deb with autostart
        run: |
          mkdir -p package-linux/usr/local/bin
          cp dist/agent-linux package-linux/usr/local/bin/agent-linux
          mkdir -p package-linux/etc/skel/.config/autostart
          cat <<EOF > package-linux/etc/skel/.config/autostart/remote-agent.desktop
          [Desktop Entry]
          Type=Application
          Exec=/usr/local/bin/agent-linux
          Hidden=false
          NoDisplay=false
          X-GNOME-Autostart-enabled=true
          Name=RemoteAgent
          Comment=Launch Remote Agent silently
          EOF
                    mkdir -p package-linux/DEBIAN
                    cat <<EOF > package-linux/DEBIAN/postinst
          #!/bin/bash
          mkdir -p /home/$USER/.config/autostart
          cp /etc/skel/.config/autostart/remote-agent.desktop /home/$USER/.config/autostart/
          chmod +x /home/$USER/.config/autostart/remote-agent.desktop
          EOF
          chmod +x package-linux/DEBIAN/postinst
          fpm -s dir -t deb -n remote-agent -v ${{ github.ref_name }} --prefix=/ package-linux

      - name: Sign Linux .deb with GPG
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d > private.key
          gpg --import private.key
          debsign dist/remote-agent_${{ github.ref_name }}_amd64.deb

      - name: Create macOS .app and .dmg
        run: |
          mkdir -p RemoteAgent.app/Contents/MacOS
          cp dist/agent-macos RemoteAgent.app/Contents/MacOS/agent-macos
          chmod +x RemoteAgent.app/Contents/MacOS/agent-macos
          cat <<EOF > RemoteAgent.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleExecutable</key><string>agent-macos</string>
            <key>CFBundleIdentifier</key><string>com.sam.remoteagent</string>
            <key>CFBundleName</key><string>RemoteAgent</string>
            <key>LSUIElement</key><true/>
          </dict></plist>
          EOF
          create-dmg RemoteAgent.app --overwrite --dmg-title="RemoteAgent" dist

      - name: Install Windows SDK & Inno Setup
        shell: pwsh
        run: |
          choco install windows-sdk-10.0 -y
          choco install innosetup -y

      - name: Import Code Signing Certificate
        shell: pwsh
        run: |
          "${{ secrets.CERTIFICATE_PFX }}" | Out-File -Encoding Byte cert.pfx
          $Env:PASSWORD = "${{ secrets.CERTIFICATE_PASSWORD }}"

      - name: Sign Windows executables
        shell: pwsh
        run: |
          $sign = "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe"
          & $sign sign /fd SHA256 /a /f cert.pfx /p $Env:PASSWORD dist\\agent-win-x64.exe
          & $sign sign /fd SHA256 /a /f cert.pfx /p $Env:PASSWORD dist\\agent-win-x86.exe
          & $sign sign /fd SHA256 /a /f cert.pfx /p $Env:PASSWORD dist\\start-agent-x64.exe
          & $sign sign /fd SHA256 /a /f cert.pfx /p $Env:PASSWORD dist\\start-agent-x86.exe

      - name: Compile Windows installer
        shell: pwsh
        run: & 'C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe' setup.iss

      - name: Sign Windows installer
        shell: pwsh
        run: |
          $sign = "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe"
          & $sign sign /fd SHA256 /a /f cert.pfx /p $Env:PASSWORD RemoteAgentInstaller.exe

      - name: Generate README & CHANGELOG
        run: |
          echo "# Remote Access Agent" > dist/README.md
          echo "- Windows: agent-win-*.exe" >> dist/README.md
          echo "- Linux: agent-linux, remote-agent_${{ github.ref_name }}_amd64.deb" >> dist/README.md
          echo "- macOS: agent-macos, RemoteAgent.dmg" >> dist/README.md

          echo "## v${{ github.ref_name }}" > dist/CHANGELOG.md
          echo "- Signed binaries & installers on all platforms" >> dist/CHANGELOG.md
          echo "- Auto-start enabled" >> dist/CHANGELOG.md

      - name: Zip final bundle
        run: |
          mkdir -p release
          cp dist/* release/
          zip -r release/RemoteAgentBundle.zip release/*

      - name: Upload GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: release/RemoteAgentBundle.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CERTIFICATE_PFX: ${{ secrets.CERTIFICATE_PFX }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
